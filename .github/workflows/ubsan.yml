name: Build UBSan Tester

on:
  push:
  pull_request:
  workflow_dispatch:
  release:
    types: [published]
  
env:
  PROJECT_TYPE: UEFI
  FORCE_INSTALL: 1
  WERROR: 1
  QEMU_VERSION_TAG: qemu-ci-8.0.0-r2

jobs:
  build-linux-clangdwarf:
    name: Linux CLANGDWARF
    strategy:
      matrix:
        groups: [UBSAN, ALIGNMENT, BUILTIN, BOUNDS, IMPLICIT_CONVERSION, INTEGER, NONNULL, POINTERS]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          repository: sasatasas/audk
          ref: master
          path: ./
          submodules: recursive
  
      - name: Use Docker in rootless mode.
        uses: ScribeMD/rootless-docker@0.2.2
  
      - name: Build BaseTools
        run: docker compose run build-package
        env:
          SELFPKG: MdePkg
          SKIP_BUILD: 1
  
      - name: Build OvmfPkgIa32
        if: always()
        run: docker compose run build-package
        env:
          SELFPKG: OvmfPkgIa32
          SELFPKG_DIR: OvmfPkg
          TOOLCHAINS: CLANGDWARF
          ARCHS: IA32
          # Without RELEASE, because it turns on -fsanitize-trap=all
          # TARGETS: RELEASE,DEBUG,NOOPT
          TARGETS: DEBUG,NOOPT
          SKIP_TESTS: 1
          SKIP_PACKAGE: 1
          BUILD_ARGUMENTS: -D WINDOWS_10_IA32
  
      - name: Build OvmfPkgX64
        if: always()
        run: docker compose run build-package
        env:
          SELFPKG: OvmfPkgX64
          SELFPKG_DIR: OvmfPkg
          TOOLCHAINS: CLANGDWARF
          ARCHS: X64
          # Without RELEASE, because it turns on -fsanitize-trap=all
          # TARGETS: RELEASE,DEBUG,NOOPT
          TARGETS: DEBUG,NOOPT
          SKIP_TESTS: 1
          SKIP_PACKAGE: 1
      
      - name: Build OpenCorePkg
        if: always()
        run: docker compose run build-package
        env:
          SELFPKG: OpenCorePkg
          SELFPKG_DIR: OpenCorePkg
          TOOLCHAINS: CLANGDWARF
          ARCHS: IA32,X64
          # Without RELEASE, because it turns on -fsanitize-trap=all
          # TARGETS: RELEASE,DEBUG,NOOPT
          TARGETS: DEBUG,NOOPT
          SKIP_TESTS: 1
          SKIP_PACKAGE: 1
          BUILD_ARGUMENTS: -D ${{ matrix.groups }}

      - name: Prepare artifacts with firmwares
        if: always()
        run: |
          IFS=', ' read -r -a TARGETS <<< "$TARGETS"
          IFS=', ' read -r -a ARCHS <<< "$ARCHS"
          for target in "${TARGETS[@]}"; do
            for arch in "${ARCHS[@]}"; do
              mkdir -p ./firmware_artifacts/Ovmf/"$arch"/"$target"_"$TOOLCHAIN"
              cp ./Build/Ovmf"$arch"/"$target"_"$TOOLCHAIN"/FV/OVMF.fd ./firmware_artifacts/Ovmf/"$arch"/"$target"_"$TOOLCHAIN"/FW.fd
            done
          done
        env:
          ARCHS: Ia32,X64
          TARGETS: DEBUG,NOOPT
          TOOLCHAIN: CLANGDWARF
    
      - name: Zip Firmware Artifacts
        run: zip CLANGDWARF_fw_artifacts.zip ./firmware_artifacts/* -r

      - name: Upload Firmware to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: CLANGDWARF Firmware Artifacts
          path: CLANGDWARF_fw_artifacts.zip

      - name: Prepare Artifacts with Ubsan
        if: always()
        run: |
          IFS=', ' read -r -a TARGETS <<< "$TARGETS"
          IFS=', ' read -r -a ARCHS <<< "$ARCHS"
          for target in "${TARGETS[@]}"; do
            for arch in "${ARCHS[@]}"; do
              for group in "${GROUPS[@]}"; do
                mkdir -p ./ubsan_artifacts/OpenCorePkg/"$target"_"$TOOLCHAIN"/"$arch"/"$group"/EFI/BOOT
                cp ./Build/OpenCorePkg/"$target"_"$TOOLCHAIN"/"$arch"/UbsanTester.efi ./ubsan_artifacts/OpenCorePkg/"$target"_"$TOOLCHAIN"/"$arch"/"$group"/UbsanTester.efi
                cp ./ubsan_artifacts/OpenCorePkg/"$target"_"$TOOLCHAIN"/"$arch"/UbsanTester.efi ./ubsan_artifacts/OpenCorePkg/"$target"_"$TOOLCHAIN"/"$arch"/"$group"/EFI/BOOT/BOOT"$arch".efi
              done
            done
          done
        env:
          ARCHS: Ia32,X64
          TARGETS: DEBUG,NOOPT
          TOOLCHAIN: CLANGDWARF
          GROUPS: ${{ matrix.groups }}

      - name: Zip Ubsan artifacts
        run: zip UbsanTester_artifacts.zip ./ubsan_artifacts/* -r

      - name: Upload Ubsan to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: UBSan Tester Artifacts
          path: UbsanTester_artifacts.zip


  test-firmwares:
    name: Test
    runs-on: ubuntu-22.04
    needs: [build-linux-clangdwarf]

    strategy:
      fail-fast: false

    steps:
      - name: Checkout ocbuild repository
        uses: actions/checkout@v3
        with:
          repository: sasatasas/ocbuild
          ref: master
          path: ./

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip libglib2.0-dev libfdt-dev libpixman-1-dev libepoxy-dev libcapstone-dev libsdl2-dev libnuma-dev libgtk-3-dev libvte-2.91-dev libbrlapi-dev libiscsi-dev libnfs-dev  librbd-dev libxen-dev
          python3 -m pip install -r requirements.txt
      - name: Downloading QEMU
        uses: robinraju/release-downloader@v1.7
        with:
          repository: "acidanthera/OcBinaryData"
          tag: ${{ env.QEMU_VERSION_TAG }}
          fileName: "qemu.tar.xz"

      - name: Installing QEMU and add to PATH
        run: |
          echo "${HOME}/qemu/bin" >> $GITHUB_PATH
          tar -xJf ./qemu.tar.xz -C $HOME
      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: CLANGDWARF Firmware Artifacts

      - name: Unzip artifacts
        run: |
          unzip CLANGDWARF_fw_artifacts.zip
          unzip UbsanTester_artifacts.zip
      
      - name: Run TestUbsan
        run: |
          IFS=', ' read -r -a TARGETS <<< "$TARGETS"
          IFS=', ' read -r -a ARCHS <<< "$ARCHS"
          for target in "${TARGETS[@]}"; do
            for arch in "${ARCHS[@]}"; do
              for group in "${GROUPS[@]}"; do
                echo Checking Ovmf"$arch" "$target"_"$TOOLCHAIN"
                python3 test_ubsan.py ./firmware_artifacts/Ovmf/"$arch"/"$target"_"$TOOLCHAIN"/FW.fd --build-path ./ubsan_artifacts/OpenCorePkg/"$target"_"$TOOLCHAIN"/"$arch"/"$group"/ --fw-arch "$arch"
              done
            done
          done
        env:
          ARCHS: Ia32,X64
          TARGETS: DEBUG,NOOPT
          TOOLCHAIN: CLANGDWARF
          GROUPS: UBSAN,ALIGNMENT,BUILTIN,BOUNDS,IMPLICIT_CONVERSION,INTEGER,NONNULL,POINTERS